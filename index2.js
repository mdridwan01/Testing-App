// const {
//   Server,
//   Keypair,
//   TransactionBuilder,
//   Operation,
//   Asset,
// } = require("stellar-sdk");
// const axios = require("axios");

// const server = new Server("https://api.mainnet.minepi.com");

// const senderSecret = "SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD";
// const senderKeypair = Keypair.fromSecret(senderSecret);
// const senderPublic = senderKeypair.publicKey();
// const recipient = "GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS";
// const NETWORK_PASSPHRASE = "Pi Network";

// async function sendMultipleTransactions(count = 20) {
//   try {
//     const account = await server.loadAccount(senderPublic);
//     const baseFee = await server.fetchBaseFee();

//     let currentSequence = account.sequence;
//     console.log(`Starting sequence: ${currentSequence}`);

//     for (let i = 0; i < count; i++) {
//       const txBuilder = new TransactionBuilder(account, {
//         fee: baseFee.toString(),
//         networkPassphrase: NETWORK_PASSPHRASE,
//       });

//       txBuilder.addOperation(
//         Operation.payment({
//           destination: recipient,
//           asset: Asset.native(),
//           amount: "1", // ‚úÖ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®‡ßá ‡¶Ø‡¶§ Pi ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®
//         })
//       );

//       // ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
//       const sequence = BigInt(currentSequence) + BigInt(i + 1);
//       txBuilder.setTimeout(30);
//       const tx = txBuilder.setSequenceNumber(sequence.toString()).build();

//       tx.sign(senderKeypair);

//       // ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
//       try {
//         const result = await server.submitTransaction(tx);
//         console.log(`‚úÖ Tx #${i + 1}: ${result.hash}`);
//       } catch (err) {
//         console.error(`
//           ‚ùå Tx #${i + 1} failed:,
//           err.response?.data?.extras?.result_codes || err
//         `);
//       }
//     }
//   } catch (e) {
//     console.error("‚ùå Error:", e);
//   }
// }

// setInterval(() => {
//   sendMultipleTransactions(20);
// },¬†1000);


// const StellarSdk = require('stellar-sdk');
// const axios = require('axios');

// const server = new StellarSdk.Server('https://api.mainnet.minepi.com');
// const senderSecret = 'SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD';
// const senderKeypair = StellarSdk.Keypair.fromSecret(senderSecret);
// const senderPublic = senderKeypair.publicKey();
// const recipient = 'GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS';
// const networkPassphrase = 'Pi Network';

// async function sendPiWithSequence(sequence, fee, index) {
//      const withdrawAmount = Number("1");
//     try {
//         const tx = new StellarSdk.TransactionBuilder(
//             new StellarSdk.Account(senderPublic, sequence),
//             {
//                 fee,
//                 networkPassphrase,
//             }
//         )
//             .addOperation(StellarSdk.Operation.payment({
//                 destination: recipient,
//                 asset: StellarSdk.Asset.native(),
//                 amount: withdrawAmount.toString(), // change amount as needed
//             }))
//             .setTimeout(30)
//             .build();

//         tx.sign(senderKeypair);
//         const result = await server.submitTransaction(tx);
//         console.log(`‚úÖ Tx ${index + 1} success: ${result.hash}`);
//     } catch (e) {
//         console.error(`‚ùå Tx ${index + 1} failed:`, e.response?.data?.extras?.result_codes || e);
//     }
// }

// async function sendMultipleTransactions(count) {
//     try {
//         const account = await server.loadAccount(senderPublic);
//         const fee = await server.fetchBaseFee();
//         let baseSequence = BigInt(account.sequence); // use BigInt to avoid precision issue

//         for (let i = 0; i < count; i++) {
//             const sequence = (baseSequence + BigInt(i + 1)).toString();
//             setTimeout(() => {
//                 sendPiWithSequence(sequence, fee, i);
//             }, i * 50); // 50ms delay between each tx
//         }
//     } catch (e) {
//         console.error('‚ùå Error loading account or fee:', e.message);
//     }
// }

// // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡ß®‡ß¶‡¶ü‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
// setInterval(() => {
//     sendMultipleTransactions(20);
// }, 1000);


// const StellarSdk = require('stellar-sdk');
// const axios = require('axios');

// const server = new StellarSdk.Server('https://api.mainnet.minepi.com');
// const senderSecret = 'SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD'; // ‚ö†Ô∏è Real secret, protect this
// const senderKeypair = StellarSdk.Keypair.fromSecret(senderSecret);
// const senderPublic = senderKeypair.publicKey();
// const recipient = 'GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS';
// const networkPassphrase = 'Pi Network';

// // ========== TRANSACTION FUNCTION ==========
// async function sendPiWithSequence(sequence, fee, index, retryCount = 0) {
//     try {
//         const account = new StellarSdk.Account(senderPublic, sequence);
//         const tx = new StellarSdk.TransactionBuilder(account, {
//             fee,
//             networkPassphrase,
//         })
//             .addOperation(StellarSdk.Operation.payment({
//                 destination: recipient,
//                 asset: StellarSdk.Asset.native(),
//                 amount: "5", // Smallest safe value
//             }))
//             .setTimeout(30)
//             .build();

//         tx.sign(senderKeypair);
//         const result = await server.submitTransaction(tx);
//         console.log(`‚úÖ Tx ${index + 1} Success: ${result.hash}`);
//     } catch (e) {
//         if (e.response?.status === 429 && retryCount < 5) {
//             const delay = 1000 * (retryCount + 1); // Exponential backoff
//             console.warn(`‚è≥ Tx ${index + 1} rate-limited. Retrying in ${delay}ms...`);
//             setTimeout(() => {
//                 sendPiWithSequence(sequence, fee, index, retryCount + 1);
//             }, delay);
//         } else {
//             console.error(`‚ùå Tx ${index + 1} failed:`, {
//                 reason: e.response?.data?.extras?.result_codes || e.message
//             });
//         }
//     }
// }

// // ========== BATCH FUNCTION ==========
// async function sendMultipleTransactions(countPerSecond) {
//     try {
//         const account = await server.loadAccount(senderPublic);
//         const fee = await server.fetchBaseFee();
//         let baseSequence = BigInt(account.sequence);

//         for (let i = 0; i < countPerSecond; i++) {
//             const sequence = (baseSequence + BigInt(i + 1)).toString();

//             setTimeout(() => {
//                 sendPiWithSequence(sequence, fee, i);
//             }, i * 200); // 200ms gap between transactions
//         }
//     } catch (e) {
//         console.error('‚ùå Error loading account or fee:', e.message);
//     }
// }

// // ========== RUN LOOP ==========
// const TPS = 5; // üîÅ Transactions per second (adjustable)

// setInterval(() => {
//     sendMultipleTransactions(TPS);
// }, 1000);


// const StellarSdk = require('stellar-sdk');

// const server = new StellarSdk.Server('https://api.mainnet.minepi.com');
// const senderSecret = 'SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD';
// const recipient = 'GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS';
// const senderKeypair = StellarSdk.Keypair.fromSecret(senderSecret);
// const senderPublic = senderKeypair.publicKey();

// (async () => {
//     try {
//         const account = await server.loadAccount(senderPublic);
//         const fee = await server.fetchBaseFee();

//         const tx = new StellarSdk.TransactionBuilder(account, {
//             fee,
//             networkPassphrase: 'Pi Network',
//         })
//             .addOperation(StellarSdk.Operation.payment({
//                 destination: recipient,
//                 asset: StellarSdk.Asset.native(),
//                 amount: '1',
//             }))
//             .setTimeout(30)
//             .build();

//         tx.sign(senderKeypair);
//         const result = await server.submitTransaction(tx);

//         console.log("‚úÖ Transaction success:", result.hash);
//     } catch (e) {
//         console.error("‚ùå Transaction error:", e.response?.data || e.message || e);
//     }
// })();


// const StellarSdk = require('stellar-sdk');
// const server = new StellarSdk.Server('https://api.mainnet.minepi.com');

// const senderSecret = 'SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD'; // ‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Secret Key
// const recipient = 'GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS';    // ‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Receiver Public Key

// const senderKeypair = StellarSdk.Keypair.fromSecret(senderSecret);
// const senderPublic = senderKeypair.publicKey();
// const networkPassphrase = 'Pi Network';

// // === ‡¶è‡¶ï‡¶ï ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ===
// async function sendTransaction(sequence, fee, index) {
//     try {
//         const account = new StellarSdk.Account(senderPublic, sequence);

//         const tx = new StellarSdk.TransactionBuilder(account, {
//             fee,
//             networkPassphrase
//         })
//             .addOperation(StellarSdk.Operation.payment({
//                 destination: recipient,
//                 asset: StellarSdk.Asset.native(),
//                 amount: "1", // ‡¶Ö‡¶≤‡ßç‡¶™ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü
//             }))
//             .setTimeout(30)
//             .build();

//         tx.sign(senderKeypair);
//         const result = await server.submitTransaction(tx);
//         console.log(`‚úÖ Tx ${index + 1}: Success - Hash: ${result.hash}`);
//     } catch (e) {
//         console.error(`‚ùå Tx ${index + 1}: Failed`, e.response?.data?.extras?.result_codes || e.message);
//     }
// }

// // === ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ===
// async function batchSendTPS(tps = 5) {
//     try {
//         const account = await server.loadAccount(senderPublic);
//         const fee = await server.fetchBaseFee();
//         const baseSequence = BigInt(account.sequence);

//         for (let i = 0; i < tps; i++) {
//             const seq = (baseSequence + BigInt(i + 1)).toString();

//             setTimeout(() => {
//                 sendTransaction(seq, fee, i);
//             }, i * 200); // delay to avoid rate limit
//         }
//     } catch (e) {
//         console.error("‚ùå Error loading account or fee:", e.message);
//     }
// }

// // === ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡ß´‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶ì ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ===
// setInterval(() => {
//     batchSendTPS(1);
// }, 3000);


// const StellarSdk = require('stellar-sdk');

// const server = new StellarSdk.Server('https://api.mainnet.minepi.com');

// // ‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Secret Key ‡¶è‡¶¨‡¶Ç Receiver Key ‡¶®‡¶ø‡¶ö‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
// const senderSecret = 'SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD'; // sender
// const recipient = 'GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS';    // receiver

// const senderKeypair = StellarSdk.Keypair.fromSecret(senderSecret);
// const senderPublic = senderKeypair.publicKey();

// (async () => {
//   try {
//     // ‚úÖ Step 1: Account Load
//     const account = await server.loadAccount(senderPublic);
//     console.log('üîì Sender account loaded');

//     // ‚úÖ Step 2: Base Fee Load
//     const fee = await server.fetchBaseFee();
//     console.log('üí∞ Base fee:', fee);

//     // ‚úÖ Step 3: Transaction Build
//     const transaction = new StellarSdk.TransactionBuilder(account, {
//       fee,
//       networkPassphrase: 'Pi Network',
//     })
//       .addOperation(StellarSdk.Operation.payment({
//         destination: recipient,
//         asset: StellarSdk.Asset.native(),
//         amount: '1', // ‡¶Ö‡¶®‡ßá‡¶ï ‡¶õ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®
//       }))
//       .setTimeout(30)
//       .build();

//     // ‚úÖ Step 4: Sign & Submit
//     transaction.sign(senderKeypair);
//     const result = await server.submitTransaction(transaction);
//     console.log('‚úÖ Transaction Success:', result.hash);
//     console.log(`üîó View: https://api.mainnet.minepi.com/transactions/${result.hash}`);
//   } catch (error) {
//     // üî• Error Output
//     console.error('‚ùå Error:', error.response?.data || error.message || error);
//   }
// })();

const StellarSdk = require('stellar-sdk');
const server = new StellarSdk.Server('https://api.mainnet.minepi.com');

const senderSecret = 'SDEWKP36AFA4LOB5YKZJMWFOXZIJ5RQJ6BSDVSCAFY5OMTJILLYDW4SD'; // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ secret key
const recipient = 'GBQGBQSQRORPBDC7YCPL6JKABCMVZ5OXF7IGEIT34V4WJH52IBP2T2AS';    // receiver address

const senderKeypair = StellarSdk.Keypair.fromSecret(senderSecret);
const senderPublic = senderKeypair.publicKey();

async function sendTransaction(sequence, fee, index) {
    try {
        const account = new StellarSdk.Account(senderPublic, sequence);

        const tx = new StellarSdk.TransactionBuilder(account, {
            fee,
            networkPassphrase: 'Pi Network'
        })
        .addOperation(StellarSdk.Operation.payment({
            destination: recipient,
            asset: StellarSdk.Asset.native(),
            amount: '1'
        }))
        .setTimeout(30)
        .build();

        tx.sign(senderKeypair);
        const result = await server.submitTransaction(tx);
        console.log(`‚úÖ Tx ${index + 1} Success: ${result.hash}`);
    } catch (e) {
        console.error(`‚ùå Tx ${index + 1} Failed:`, e.response?.data?.extras?.result_codes || e.message);
    }
}

async function sendBatch(tps = 20) {
    try {
        const account = await server.loadAccount(senderPublic);
        const fee = await server.fetchBaseFee();
        const baseSequence = BigInt(account.sequence);

        for (let i = 0; i < tps; i++) {
            const seq = (baseSequence + BigInt(i + 1)).toString();

            // Delay to avoid rate limit, spread within 1 second
            setTimeout(() => {
                sendTransaction(seq, fee, i);
            }, i * 50); // 50 ms gap * 20 = 1000 ms (1 second)
        }
    } catch (e) {
        console.error('Error loading account or fee:', e.message);
    }
}

// Run every 1 second to send 20 transactions per second
setInterval(() => {
    sendBatch(1);
}, 5000);
